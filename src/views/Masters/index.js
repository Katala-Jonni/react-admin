import Masters from "./Masters";
import { connect } from "react-redux";

import {
  get_all_todo,
  get_important_todo,
  get_nav_filters,
  get_nav_labels,
  get_starred_todo,
  get_unimportant_todo,
  get_unselected_all_todo,
  get_unstarred_todo,
  handle_request_close,
  on_hide_loader,
  on_delete_todo,
  on_label_menu_item_select,
  on_label_select,
  on_label_update,
  on_option_menu_select,
  search_todo,
  on_sortend,
  on_todo_add,
  on_todo_checked,
  on_todo_select,
  on_todo_update,
  select_all_todo,
  set_current_todo_null,
  on_toggle_drawer,
  update_search,
  getSearchTodo,
  getAlertMessage,
  getLoader,
  getShowMessage,
  getDrawerState,
  getAllToDos,
  getCurrentTodo,
  getUser,
  getSelectedToDos,
  getLabelMenuState,
  getOptionMenuState,
  getToDos,
  getFilter,
  getTodoConversation,
  getConversation,
  loadMaster,
  // getMasters,
  getLabels,
  loadLabel,
  deleteState,
  getServices,
  deleteIgnoreMembers,
  changeIgnoreMembers,
  getIgnoreMembers,
  startMasters,
  getErrorMessage,
  getLoaderForm,
  startErrorMessage
} from "../../modules/Master";
import { editMasters, getMasters } from "../../modules/Calendar";

const mapStateFromProps = state => ({
  searchTodo: getSearchTodo(state),
  alertMessage: getAlertMessage(state),
  loader: getLoader(state),
  showMessage: getShowMessage(state),
  drawerState: getDrawerState(state),
  allToDos: getAllToDos(state),
  currentTodo: getCurrentTodo(state),
  user: getUser(state),
  selectedToDos: getSelectedToDos(state),
  labelMenuState: getLabelMenuState(state),
  optionMenuState: getOptionMenuState(state),
  toDos: getToDos(state),
  filter: getFilter(state),
  todoConversation: getTodoConversation(state),
  conversation: getConversation(state),
  masters: getMasters(state),
  labels: getLabels(state),
  ignoreMembers: getIgnoreMembers(state),
  form: state.form,
  errorMessage: getErrorMessage(state),
  loaderForm: getLoaderForm(state)
});

const mapDispatchFromProps = {
  get_all_todo,
  get_important_todo,
  get_nav_filters,
  get_nav_labels,
  get_starred_todo,
  get_unimportant_todo,
  get_unselected_all_todo,
  get_unstarred_todo,
  handle_request_close,
  on_hide_loader,
  on_delete_todo,
  on_label_menu_item_select,
  on_label_select,
  on_label_update,
  on_option_menu_select,
  search_todo,
  on_sortend,
  on_todo_add,
  on_todo_checked,
  on_todo_select,
  on_todo_update,
  select_all_todo,
  set_current_todo_null,
  on_toggle_drawer,
  update_search,
  loadMaster,
  loadLabel,
  deleteState,
  changeIgnoreMembers,
  deleteIgnoreMembers,
  startMasters,
  editMasters,
  startErrorMessage
};

export default connect(mapStateFromProps, mapDispatchFromProps)(Masters);
